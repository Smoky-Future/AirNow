{"version":3,"sources":["component/loader.js","actions/index.js","config.js","component/displayBoard.js","App.js","reducers/airDataReducers.js","reducers/indexLevelReducers.js","reducers/index.js","serviceWorker.js","index.js"],"names":["className","getNewAirData","location","lat","latitude","lng","longitude","type","payload","axios","get","setIndexLevel","indexData","condition","background","color","DisplayBoard","props","state","pm25Data","updatePM25","bind","prevProps","airData","this","pm25","data","iaqi","v","speed","i","setTimeout","setState","getCountingFinished","city","name","style","Component","connect","indexLevel","dispatch","bindActionCreators","App","counting","checkNowOnClick","navigator","geolocation","getCurrentPosition","position","ge","coords","e","flag","onClick","disabled","airDataReducer","action","airApp","combineReducers","indexLevelReducer","Boolean","window","hostname","match","createStoreWithMiddleWare","applyMiddleware","ReduxPromise","createStore","rootEl","document","getElementById","ReactGA","initialize","pageview","pathname","search","ReactDOM","render","StrictMode","store","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.954bf225.chunk.js","sourcesContent":["import React from 'react';\n\nexport default () => {\n    return (\n        <div className=\"loader\">\n            <div className=\"particle green\"></div>\n            <div className=\"particle orange\"></div>\n            <div className=\"particle red\"></div>\n            <div className=\"particle purple\"></div>\n        </div>\n    );\n}","import axios from 'axios';\nimport API_KEY from '../config';\n\nexport const SET_INDEX_LEVEL = \"SET_INDEX_LEVEL\";\nexport const KEEP_INDEX_LEVEL = \"KEEP_INDEX_LEVEL\";\n\nexport const getNewAirData =  (location) => {\n  // console.log('getting the location', location);\n  const lat = location.latitude;\n  const lng = location.longitude;\n  const airData =  axios.get(`https://api.waqi.info/feed/geo:${lat};${lng}/?token=${API_KEY}`);\n  \n  return {\n    type: 'NEW_AIR_DATA',\n    payload: airData,\n  };\n};\n\nexport const setIndexLevel = (indexData) => {\n  switch (indexData) {\n    case 1:\n      return {\n        type: SET_INDEX_LEVEL,\n        payload: {\n          condition: \"Healthy\",\n          background: \"bg-healthy\",\n          color: \"#70F1CE\"\n        }\n      };\n    case 51:\n      return {\n        type: SET_INDEX_LEVEL,\n        payload: {\n          condition: \"Moderate\",\n          background: \"bg-moderate\",\n          color: \"#EDC77A\"\n        }\n      };\n    \n    case 101:\n      return {\n        type: SET_INDEX_LEVEL,\n        payload: {\n          condition: \"Unhealthy for Sensitive Groups\",\n          background: \"bg-sensitive\",\n          color: \"#EFA556\"\n        }\n      };\n    case 151:\n      return {\n        type: SET_INDEX_LEVEL,\n        payload: {\n          condition: \"Unhealthy\",\n          background: \"bg-unhealthy\",\n          color: \"#FE7148\"\n        }\n      };\n    case 201:\n      return {\n        type: SET_INDEX_LEVEL,\n        payload: {\n          condition: \"Very Unhealthy\",\n          background: \"bg-danger\",\n          color: \"#B093EF\"\n        }\n      };\n    case 301:\n      return {\n        type: SET_INDEX_LEVEL,\n        payload: {\n          condition: \"Hazardous\",\n          background: \"bg-hazardous\",\n          color: \"#000000\"\n        }\n      };\n  \n    default:\n      return {\n        type: KEEP_INDEX_LEVEL\n      };\n  }\n \n}\n","const API_KEY = 'f042aac189855a41eaea34a368f3891c87a073fb';\n\n\nexport default API_KEY;\n","import React, { Component } from 'react';\nimport { bindActionCreators } from \"redux\"\nimport Loader from './loader';\nimport { connect } from 'react-redux';\nimport { setIndexLevel } from \"../actions\"\n\nclass DisplayBoard extends Component {\n  constructor(props) {\n    super();\n\n    this.state = { pm25Data: null };\n    this.updatePM25 = this.updatePM25.bind(this);\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.airData[0] !== this.props.airData[0]) {\n      const pm25 = this.props.airData[0].data.iaqi.pm25.v;\n      this.updatePM25(pm25);\n    }\n  }\n\n  // Create the animation of counting\n  updatePM25(pm25Data) {\n    let speed;\n    if (pm25Data < 100) {\n      speed = 60;\n    } else if (pm25Data < 200) {\n      speed = 40;\n    } else if (pm25Data < 300) {\n      speed = 38;\n    } else {\n      speed = 35;\n    }\n    for (let i = 0; i <= pm25Data; i++) {\n      setTimeout(\n        ((i) => {\n          return () => {\n            this.setState({ pm25Data: i});\n            if (i === pm25Data) {\n              this.props.getCountingFinished(true);\n            }\n            this.props.setIndexLevel(i);\n          };\n        })(i), ((i) => {\n          return i*speed\n        })(i)\n      );\n    }\n  }\n\n  render() {\n    if (this.props.airData[0]) {\n      return (\n        <div>\n          <div>\n            <div className=\"airnow\">SmokyFuture</div>\n          </div>\n          <div className=\"center-block\">\n          <h1 className=\"city\">{this.props.airData[0].data.city.name}</h1>\n          <div className=\"main-meter animated bounceIn\" style={{color: `${this.props.color}`}}>\n            <h3 className=\"title\">PM2.5</h3>\n            <div className=\"pm25\"> {this.state.pm25Data} </div>\n            <h3 className=\"condition\">{this.props.condition}</h3>\n          </div>\n          </div>\n        </div>\n      );\n    }\n    return (\n      <div className=\"vertical-center\">\n        <div className=\"loader-container\">\n          <Loader />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    airData: state.airData,\n    color: state.indexLevel.color,\n    condition: state.indexLevel.condition\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators({ setIndexLevel }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DisplayBoard);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport DisplayBoard from './component/displayBoard';\nimport { getNewAirData } from './actions/index';\nimport Loader from './component/loader';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { location: null, counting:true };\n    this.checkNowOnClick = this.checkNowOnClick.bind(this);\n    this.getCountingFinished = this.getCountingFinished.bind(this);\n  }\n  componentWillMount() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        this.setState({ location: position });\n        this.props.ge(this.state.location.coords);\n      });\n    }\n    // console.log('nothing');\n  }\n  // componentDidMount() {\n  //   let height = window.outerHeight.toString();\n    \n  //   document.querySelector(\"body\").style.height = height+\"px\"\n  // }\n  checkNowOnClick(e) {\n    if (navigator.geolocation) {\n      this.setState({ location: null, counting: true });\n      navigator.geolocation.getCurrentPosition((position) => {\n        this.setState({ location: position });\n        this.props.ge(this.state.location.coords);\n      });\n    }\n  }\n  getCountingFinished(flag) {\n    if (flag){\n      this.setState({counting: false});\n    }\n  }\n  render() {\n      if (this.state.location) {\n        // const location = this.state.location.coords;\n        // console.log(location)\n        return (\n          <div>\n            <DisplayBoard getCountingFinished={this.getCountingFinished} />\n            {this.state.counting  \n            ? <button onClick={this.checkNowOnClick} className=\"check-button diable\" disabled>Checking</button>\n            : <button onClick={this.checkNowOnClick} className=\"check-button\">Update</button>\n            }\n            <div className={`global-bg ${this.props.background}`}></div>\n          </div>\n        );\n      }\n    return (\n      <div className=\"vertical-center\"> \n        <div className=\"loader-container\">\n          <Loader />\n          <p className=\"text-center\">\n            The app will fetch the air quality index based on your location. \n          </p>\n          <p className=\"text-center\">\n            <strong>Make sure your Location Service is turned on.</strong>\n          </p>\n      </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators({ ge: getNewAirData }, dispatch);\n\nconst mapStateToProps = (state) => {\n  return {\n    background: state.indexLevel.background\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const airDataReducer = (state = [], action) => {\n  switch (action.type) {\n    case 'NEW_AIR_DATA':\n      return [\n        action.payload.data,\n      ];\n    default:\n      return state;\n  }\n};\n\nexport default airDataReducer;\n","import { SET_INDEX_LEVEL, KEEP_INDEX_LEVEL } from \"../actions\"\n\nconst airDataReducer = (state = {\n  condition: \"\",\n  color: \"#70F1CE\",\n  background: \"bg-white\"\n\n}, action) => {\n  switch (action.type) {\n    case SET_INDEX_LEVEL:\n      return {\n        ...state,\n        condition: action.payload.condition,\n        background: action.payload.background,\n        color: action.payload.color\n      }\n    case KEEP_INDEX_LEVEL:\n        return state;\n    default:\n      return state;\n  }\n};\n\nexport default airDataReducer;\n","import { combineReducers } from 'redux';\n\nimport airDataReducer from './airDataReducers';\nimport indexLevelReducer from './indexLevelReducers';\n\nconst airApp = combineReducers({ airData: airDataReducer, indexLevel: indexLevelReducer });\n\nexport default airApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware} from 'redux';\nimport ReduxPromise from 'redux-promise';\nimport ReactGA from 'react-ga';\n\n\nimport './index.css';\nimport App from './App';\nimport airApp from './reducers/index';\nimport * as serviceWorker from './serviceWorker';\n\nconst createStoreWithMiddleWare = applyMiddleware(ReduxPromise)(createStore);\nconst rootEl = document.getElementById('root');\nReactGA.initialize('UA-128591856-2');\nReactGA.pageview(window.location.pathname + window.location.search);\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={createStoreWithMiddleWare(airApp)}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  rootEl\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}